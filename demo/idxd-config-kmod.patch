From 58038bf811e9942aebd6a812c7b0abceee66fc0c Mon Sep 17 00:00:00 2001
From: Oleg Zhurakivskyy <oleg.zhurakivskyy@intel.com>
Date: Mon, 29 Nov 2021 20:49:25 +0200
Subject: [PATCH] accel-config: Make libkmod, libudev optional

Signed-off-by: Oleg Zhurakivskyy <oleg.zhurakivskyy@intel.com>
---
 accfg/accel-config.c | 15 +++++++++++++--
 accfg/lib/libaccfg.c |  1 +
 accfg/lib/private.h  |  9 +++++++++
 configure.ac         | 11 +++++++++--
 4 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/accfg/accel-config.c b/accfg/accel-config.c
index 0840e0b..c5ee687 100644
--- a/accfg/accel-config.c
+++ b/accfg/accel-config.c
@@ -7,7 +7,9 @@
 #include <unistd.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#ifdef HAVE_KMOD
 #include <libkmod.h>
+#endif
 #include <builtin.h>
 #include <accfg/libaccel_config.h>
 #include <ccan/array_size/array_size.h>
@@ -75,6 +77,7 @@ static struct cmd_struct commands[] = {
 #endif
 };
 
+#ifdef HAVE_KMOD
 static int idxd_kmod_init(struct kmod_ctx **ctx, struct kmod_module **mod)
 {
 	int rc;
@@ -97,12 +100,15 @@ static int idxd_kmod_init(struct kmod_ctx **ctx, struct kmod_module **mod)
 
 	return rc;
 }
+#endif
 
 int main(int argc, const char **argv)
 {
 	struct accfg_ctx *ctx;
+#ifdef HAVE_KMOD
 	struct kmod_ctx *kmod_ctx;
 	struct kmod_module *mod;
+#endif
 	unsigned int last_error;
 	int rc;
 
@@ -122,16 +128,19 @@ int main(int argc, const char **argv)
 		return -EINVAL;
 	}
 
+#ifdef HAVE_KMOD
 	rc = idxd_kmod_init(&kmod_ctx, &mod);
 	if (rc < 0) {
 		fprintf(stderr, "Failed initializing kernel module\n");
 		goto error_exit;
 	}
-
+#endif
 	rc = accfg_new(&ctx);
 	if (rc) {
+#ifdef HAVE_KMOD
 		kmod_module_unref(mod);
 		kmod_unref(kmod_ctx);
+#endif
 		goto error_exit;
 	}
 
@@ -161,9 +170,11 @@ int main(int argc, const char **argv)
 		printf(": %s\n", accfg_ctx_get_last_error_str(ctx));
 	}
 	accfg_unref(ctx);
+
+#ifdef HAVE_KMOD
 	kmod_module_unref(mod);
 	kmod_unref(kmod_ctx);
-
+#endif
 	if (!rc)
 		return EXIT_SUCCESS;
 error_exit:
diff --git a/accfg/lib/libaccfg.c b/accfg/lib/libaccfg.c
index f4fc17e..7897091 100644
--- a/accfg/lib/libaccfg.c
+++ b/accfg/lib/libaccfg.c
@@ -10,6 +10,7 @@
 #include <unistd.h>
 #include <uuid/uuid.h>
 #include <errno.h>
+#include <inttypes.h>
 #include <ctype.h>
 #include <libgen.h>
 #include <string.h>
diff --git a/accfg/lib/private.h b/accfg/lib/private.h
index 57aa1ed..ecb9bd7 100644
--- a/accfg/lib/private.h
+++ b/accfg/lib/private.h
@@ -8,8 +8,12 @@
 #include <stdbool.h>
 #include <syslog.h>
 #include <string.h>
+#ifdef HAVE_UDEV
 #include <libudev.h>
+#endif
+#ifdef HAVE_KMOD
 #include <libkmod.h>
+#endif
 #include <util/log.h>
 #include <uuid/uuid.h>
 #include <ccan/list/list.h>
@@ -160,13 +164,18 @@ struct accfg_ctx {
 	struct accfg_error_ctx *error_ctx;
 };
 
+#ifdef HAVE_UDEV
 static inline int check_udev(struct udev *udev)
 {
 	return udev ? 0 : -ENXIO;
 }
+#endif
 
+#ifdef HAVE_KMOD
 static inline int check_kmod(struct kmod_ctx *kmod_ctx)
 {
 	return kmod_ctx ? 0 : -ENXIO;
 }
+#endif
+
 #endif /* _LIBACCFG_PRIVATE_H_ */
diff --git a/configure.ac b/configure.ac
index b2ef6d0..b3c2ede 100755
--- a/configure.ac
+++ b/configure.ac
@@ -97,8 +97,15 @@ AM_CONDITIONAL([ENABLE_TEST], [test "x$enable_test" = "xyes"])
 PKG_CHECK_MODULES([UUID], [uuid],
         [AC_DEFINE([HAVE_UUID], [1], [Define to 1 if using libuuid])])
 PKG_CHECK_MODULES([JSON], [json-c])
-PKG_CHECK_MODULES([KMOD], [libkmod])
-PKG_CHECK_MODULES([UDEV], [libudev])
+PKG_CHECK_MODULES([KMOD], [libkmod],
+			  [AC_DEFINE([HAVE_KMOD], [1], [Defined if using libkmod])],
+			  KMOD_CFLAGS=""
+			  KMOD_LIBS="")
+
+PKG_CHECK_MODULES([UDEV], [libudev],
+			  [AC_DEFINE([HAVE_UDEV], [1], [Defined if using libudev])],
+			  UDEV_CFLAGS=""
+			  UDEV_LIBS="")
 
 AC_ARG_WITH([bash-completion-dir],
 	AS_HELP_STRING([--with-bash-completion-dir[=PATH]],
-- 
2.34.1

